
Introduction:



*/
One of the biggest reasons for modules is JavaScript’s global namespace which can become easily polluted. 

Functions are the only thing in JavaScript that create a new scope; thus anything not declared within a function is apart of the global namespace.


Thus every function we declare in JavaScript is available globally and therefore its name cannot be used again. Often this leads to a polluted namespace where names and code can be difficult to find and reuse. 

But sometimes we don’t want that function to be available everywhere. In order to make functions in one JavaScript file available to just a single other JavaScript file, we can use modules.
/*







Modules help developer’s separate functionality and organize the codebase.

There is no native support for a modules system in ES5. Fortunately there are non native ways to <i>emulate</i> a modules system, one of popular ones being CommonJS. 

CommonJS syntax will be familiar to those who work in the Node.js ecosystem.

Another popular one is <b>AMD</b>


<h2>CommonJS</h2>


A CommonJS module is essentially a reusable piece of JavaScript which <b>exports</b> specific objects, making them available for other modules to require in their programs.
With CommonJS, each JavaScript file stores modules in its own unique module context (just like wrapping it in a closure). In this scope, we use the module.exports object to expose modules, and require to import them.



Below is an example CommonJS module in a file called <b>myModule.js</b>

<pre>

function myModule() {
  this.hello = function() {
    return 'hello!';
  }

  this.goodbye = function() {
    return 'goodbye!';
  }
}

module.exports = myModule;

</pre>


If <i>myModule</i> needs to be used, you can <i>require</i> it in your file:

<pre>
var myModule = require('myModule');

var myModuleInstance = new myModule();
myModuleInstance.hello(); // 'hello!'
myModuleInstance.goodbye(); // 'goodbye!'


</pre>

One issue with CommonJS is that it loads modules synchronously. This will be an issue in the browser as the browser will be blocked from running anything else until it finishes loading modules. 


To get around this issue, we must <b>"bundle"</b> the modules. Two of the most popular options are <b>Browserify</b> and <b>Webpack</b>. Please see section on Module Bundling.



<h2>Module Bundling</h2>

Module bundling is the process of concatenating a group of modules and their dependencies into a single file (or group of files) in the correct order, in order to reduce the number of browser requests. 




<h2>Bundling CommonJS</h2>

If you are using non-native module systems like CommonJS (which browsers can't interpret), you will need to use a specialized tool to convert your modules into properly-ordered browser-friendly code.


<h3>Browserify</h3>


One such tool is a module bundler called <b>Browserify</b>, which compiles CommonJS modules for the browser (CommonJS loads modules synchronously, which is not practical for browsers). 

Lets say you have the below main.js file that requires (imports) a module 'myDependency'

<pre>
var myDependency = require(‘myDependency’);

var myGrades = [93, 95, 88, 0, 91];

var myAverageGrade = myDependency.average(myGrades);



</pre>

We have one dependency. Using the command below, 



Browserify recursively bundles up all the required module(s) starting at main.js into a single file called bundle.js:


<pre>
browserify main.js -o bundle.js


</pre>



it bundles them all in the right order into a single file. 

All you have to do is insert a single <script> tag with your “bundle.js” file into your html to ensure that all of your source code is downloaded in one HTTP request. 

if you have multiple files with multiple dependencies, you simply tell Browserify what your entry file is.


The final step would be Minification of the bundled code which is the process of removing unnecessary characters from source code e.g. whitespace, comments, new line characters, etc., in order to reduce the overall size of the content without changing the functionality of the code.


<h3>Webpack</h3>



Webpack is another bundler that can be used. Webpack provides some useful features like code splitting, a way to split your codebase into chunks which are loaded on demand.


For example, if you have a web app with blocks of code that are only required under certain circumstances, it might not be efficient to put the whole codebase into a single massive bundled file. In this case, you could use code splitting to extract code into bundled chunks that can be loaded on demand, avoiding trouble with big up-front payloads when most users only need the core of your application.

Code splitting is just one of many compelling features Webpack offers. Please see Browserify vs Webpack.


































 


















https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc

https://www.sitepoint.com/understanding-es6-modules/

