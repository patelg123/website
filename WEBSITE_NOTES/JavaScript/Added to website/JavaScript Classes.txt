ES6 Javascript Classes

It is important to note JavaScript's Class syntaX in ES6 is little more than syntactic 'sugar over' the existing prototype based behaviour.

ES2015's class keyword does not bring us "true classes", a là Java or SmallTalk. Rather, it simply provides a more convenient syntax for creating objects related via prototype linkage. Under the hood, there's nothing new here.

JavaScript's "classes" aren't like classes in languages like Java pr Python. In these class based languages you create classes whcih are templates for objects. When you want a new object, you instantiate the class, which tells the language engine to copy the methods and properties of the class into a new entity, called an instance. The instance is your object, and, after instantiation, has absolutely no active relation with the parent class.


"Instantiating" a class in JavaScript does create a new object, but not one that is independent of its parent class.
Rather, it creates an object that is linked to a prototype. Changes to that prototype propagate to the new object, even after instantiation.




----------------
"use strict";

// Food is a base class
class Food {

    constructor (name, protein, carbs, fat) {
        this.name = name;
        this.protein = protein;
        this.carbs = carbs;
        this.fat = fat;
    }

    toString () {
        return `${this.name} | ${this.protein}g P :: ${this.carbs}g C :: ${this.fat}g F`
    }

    print () {
      console.log( this.toString() );
    }
}

const chicken_breast = new Food('Chicken Breast', 26, 0, 3.5);

chicken_breast.print(); // 'Chicken Breast | 26g P :: 0g C :: 3.5g F'

---------------------------

The same thing using constructor function pre ES Class:

------------
function Food(name, protein, carbs, fat) {
        this.name = name;
        this.protein = protein;
        this.carbs = carbs;
        this.fat = fat;
}

Food.prototype.toString = function toString () {
        return `${this.name} | ${this.protein}g P :: ${this.carbs}g C :: ${this.fat}g F`
}

Food.prototype.print = function print() {
      console.log( this.toString() );
}


const chicken_breast = new Food('Chicken Breast', 26, 0, 3.5);

chicken_breast.print(); // 'Chicken Breast | 26g P :: 0g C :: 3.5g F'

-----------------


<h1>Creating Subclasses with extends & Calling with super:</h1>


----------------------------

"use strict";

// Food is a base class
class Food {

    constructor (name, protein, carbs, fat) {
        this.name = name;
        this.protein = protein;
        this.carbs = carbs;
        this.fat = fat;
    }

    toString () {
        return `${this.name} | ${this.protein}g P :: ${this.carbs}g C :: ${this.fat}g F`
    }

    print () {
      console.log( this.toString() );
    }
}


// FatFreeFood is a derived class
class FatFreeFood extends Food {

    constructor (name, protein, carbs) {
        super(name, protein, carbs, 0);
    }

    print () {
        super.print(); 
        console.log(`Would you look at that -- ${this.name} has no fat!`);
    }

}

const fat_free_yogurt = new FatFreeFood('Greek Yogurt', 16, 12);
fat_free_yogurt.print(); // 'Greek Yogurt | 26g P :: 16g C :: 0g F  /  Would you look at that -- Greek Yogurt has no fat!'



----------------------------

Using old way:


function Food(name, protein, carbs, fat) {
        this.name = name;
        this.protein = protein;
        this.carbs = carbs;
        this.fat = fat;
}

Food.prototype.toString = function toString () {
        return `${this.name} | ${this.protein}g P :: ${this.carbs}g C :: ${this.fat}g F`
}

Food.prototype.print = function print() {
      console.log( this.toString() );
	
}


function FatFreeFood (name, protein, carbs, fat) {
	Food.call(this, name, protein, carbs, fat);	
}


FatFreeFood.prototype = Object.create(Food.prototype);


FatFreeFood.prototype.print_message = function print_message() {
	console.log(`Would you look at that -- ${this.name} has no fat!`);         
}


const fat_free_yogurt = new FatFreeFood('Greek Yogurt', 16, 12);
fat_free_yogurt.print();
fat_free_yogurt.print_message(); // 'Greek Yogurt | 26g P :: 16g C :: 0g F  /  Would you look at that -- Greek Yogurt has no fat!'




Inheritance

Prototypes are also used for inheritance through the prototype chain. In JavaScript, every object has a prototype, and since a prototype is just another object, it has a prototype as well, and so on… until we reach a prototype with a value of null—the final link in the prototype chain.

When we access a method or property, JavaScript checks if it’s defined within the object definition, if it isn’t, it will check the prototype and see if it’s defined there. If it can’t find it there either, it will keep going down the prototype chain until it’s found, or until it reaches the end of the chain.

Here’s how it works:

// the user object

function User( name, email, role ) {

  this.name = name;
  this.email = email;
  this.role = role;

}

User.prototype.sayHey = function() {

  console.log( “Hey, I’m an “ + role);

}

// the editor object inherits from user

function Editor( name, email ) {

   // The Call function is calling the Constructor of User
   // and decorates Editor with the same properties

   User.call(this, name, email, "admin"); 

}

// To set up the prototype chain, we create a new object using
// the User prototype and assign it to the Editor prototype

Editor.prototype = Object.create( User.prototype );

// Now we can access all the properties and methods
// of User from the Editor object

var david = new Editor( "David", "matthew@medium.com" );

david.sayHey();



<h3>Same thing using Constructor Function</h3>